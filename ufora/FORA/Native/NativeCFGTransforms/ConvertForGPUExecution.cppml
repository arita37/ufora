#include "ConvertForGPUExecution.hppml"
#include "../NativeCode.hppml"
#include "../NativeTypeFor.hpp"
#include "../NativeVariable.hppml"
#include "../../TypedFora/ABI/VectorRecord.hpp"
#include "../../TypedFora/ABI/VectorRecordCodegen.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"

namespace NativeCFGTransforms {

class IncrementReturnIndexTransformer {
public:
	IncrementReturnIndexTransformer(uword_t maxIdx) {
	mMaxIdx.push_back(maxIdx);
	mNullCont = NativeContinuation(
					NativeVariable::Temp(NativeType::Nothing()),
					NativeExpression::Return(0, NativeConstant::Nothing().expr()));
	}

	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}

	Nullable<NativeCFG> processDown(const NativeCFG& inCFG, bool& cont) const
		{
		mMaxIdx.push_back(inCFG.returnTypes().size());
		return null();
		}
	Nullable<NativeCFG> processUp(const NativeCFG& inCFG) const
		{
		mMaxIdx.pop_back();
		return null();
		}

	//strip out the callback variables and replace with 'nothing'
	//won't be a problem unless they get used
	NativeVariable 		processDown(const NativeVariable& t, bool& cont) const
		{
		if (isRuntimeCallbackType(t.type()))
			return NativeVariable(t.varID(), NativeType::Nothing());
		return t;
		}

	NativeExpression	processDown(const NativeExpression& inExp, bool& ioCont) const
		{
		@match NativeExpression(inExp)
			-|	Tagged(_, Interrupt()) ->> {
				return  NativeExpression::Nothing();
				}
			-|	Tagged(_, KickToInterpreterCheck()) ->> {
				return  NativeExpression::Nothing();
				}
//			Why are we not discarding 'TransferToInterpreter' tagged expressions?
//			-|	Tagged(_, TransferToInterpreter()) ->> {
//				return  NativeExpression::Nothing();
//			}
			-|	_ ->> {
				return inExp;
				}
			;
		}

	NativeExpression	processUp(const NativeExpression& inExp) const
		{
		@match NativeExpression(inExp)
			-|	Return(idx, val) ->> {
				if (idx < mMaxIdx.back())
					return NativeExpression::Return(idx+1, val);
				else
					return NativeExpression::Return(0, val);
				}
			-|	Call(f, continuations, args, meta) ->> {
				auto newF = f;
				@match NativeCallTarget(f)
				-|	Inline(cfg, block) ->> {
					newF = NativeCallTarget::Inline(prependNothingToReturnTypes(cfg), block);
					}
				-| _ ->> {}
				return NativeExpression::Call(
						newF,
						emptyTreeVec() + mNullCont + continuations,
						args,
						meta);
				}

			-|	Tagged(e, HomogenousVectorLookup(vectorRecord, index, type)) ->> {
				lassert(vectorRecord.isVariable());
				NativeVariable vrv = vectorRecord.getVariable().var();
				lassert(vrv.type().isComposite());
				auto comp = vrv.type().getComposite();
				lassert(comp.elements().size()==4);
				vrv.type().getComposite().elements() =
						emptyTreeVec() + type.ptr()
							+ comp.elements().slice(1, comp.elements().size());

				return NativeExpression::BinaryOp(
								NativeBinaryOpcode::Add(),
								NativeExpression::ValueExtract(
										emptyTreeVec() + (uword_t)0,
										vectorRecord),
								index
								);
				}

			-|	_ ->> {
				return inExp;
				}
			;
		}

private:
	NativeCFG prependNothingToReturnTypes(const NativeCFG& inCfg) const {
		NativeCFG cfg(inCfg);
		cfg.returnTypes() = emptyTreeVec() + NativeType::Nothing() + cfg.returnTypes();
		return cfg;

		}
	mutable std::vector<uword_t> mMaxIdx;
	NativeContinuation mNullCont;
};

class VectorRecordForGpuTransformer {
public:
	VectorRecordForGpuTransformer() {
		mVectorDataType = NativeTypeFor<TypedFora::Abi::VectorRecord>::get();
		lassert(mVectorDataType.isComposite());
		NativeType_CompositeType comp = mVectorDataType.getComposite();
		lassert(comp.elements().size()==4);
		mGpuVectorDataType = NativeType::Composite(
				emptyTreeVec() +
				NativeType::uint8().ptr() +
				comp.elements().slice(1, comp.elements().size())
				);
		}

	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}

	Nullable<NativeVariable> processDown(const NativeVariable& var, bool& cont) const
		{
		if (var.type() == mVectorDataType)
			{
			if (mGpuVectorsForForaVectors.find(var) == mGpuVectorsForForaVectors.end())
				{
				mGpuVectorsForForaVectors[var] = NativeVariable::Temp(mGpuVectorDataType);
				}
			cont = false;
			return null() << mGpuVectorsForForaVectors[var];
			}
		return null();
		}

	Nullable<NativeType> processUp(const NativeType& typ) const
		{
		if (typ == mVectorDataType)
			{
			return null() << mGpuVectorDataType;
			}
		return null();
		}

private:
	mutable std::map<NativeVariable, NativeVariable> mGpuVectorsForForaVectors;
	NativeType mVectorDataType;
	NativeType mGpuVectorDataType;
};

class StripIncompatibleForGpuTransformer {
public:
	template<class T>
	Nullable<T> processDown(const T& in, bool& out) const
		{
		return null();
		}
	template<class T>
	Nullable<T> processUp(const T& in) const
		{
		return null();
		}

	NativeExpression processUp(const NativeExpression& inExp) const
		{
		@match NativeExpression(inExp)
			-|	Let(v, exp, within) ->> {
				if (exp.type())
					return inExp;
				else
					return mUnsupported;
				}
			-|	_ ->> {
				return inExp;
				}
			;
		}

	NativeExpression processDown(const NativeExpression& inExp, bool& ioCont) const
		{
		@match NativeExpression(inExp)
			-|	Alloc(_) ->> {
				return mUnsupported;
				}
			-|	Selector(_) ->> {
				return mUnsupported;
				}
			-|	ElementAddress(_) ->> {
				return mUnsupported;
				}
			-|	CallLibraryFunction(_) ->> {
				return mUnsupported;
				}
			-|	Continuations(_) ->> {
				return mUnsupported;
				}
			-|	FollowContinuation(_) ->> {
				return mUnsupported;
				}
			-|	Halt()	->> {
				return mUnsupported;
				}
			-|	_ ->> {
				return inExp;
				}
			;
		}

	StripIncompatibleForGpuTransformer()
		{
		mUnsupported = NativeExpression::Return(0, NativeConstant::Nothing().expr());
		}
private:
	NativeExpression mUnsupported;
};

NativeCFG convertForGpuExecution(const NativeCFG& in, unsigned int resultPartSize)
	{
	NativeCFG cfg(in);
	cfg.returnTypes() =
			emptyTreeVec() + NativeType::Nothing() +
			cfg.returnTypes().slice(0, resultPartSize);

	// 1. Convert VectorRecords to GPU VectorRecords.
	cfg = transform(cfg, VectorRecordForGpuTransformer());
	// 2. Add a Nothing as the first return type, update continuations,
	//    and remove some runtime stuff
	cfg = transform(cfg, IncrementReturnIndexTransformer(resultPartSize));
	// 3. Remove unsupported code and rewire it to return to that 1st 'Nothing'
	//    type which we added in an earlier pass
	cfg = transform(cfg, StripIncompatibleForGpuTransformer());
	return cfg;
	}

}
