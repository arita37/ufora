/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "VectorHandleCodegen.hppml"
#include "NativeLayoutType.hppml"


typedef TypedNativeExpressionBehaviors<TypedFora::Abi::VectorHandle*> behavior_type;

using TypedFora::Abi::BigVectorHandle;
using TypedFora::Abi::ForaValueArray;


NativeType NativeTypeForImpl<TypedFora::Abi::VectorHandle>::get(void)
	{
	using namespace TypedFora::Abi;

	NativeType unpadded =
		NativeType::Composite("mRefcount", NativeTypeFor<AO_t>::get()) +
		NativeType::Composite("mBasePackedDataPtr", NativeTypeFor<uint8_t*>::get()) +
		NativeType::Composite("mPageletTree", NativeTypeFor<void*>::get()) +
		NativeType::Composite("mUnpagedValues", NativeTypeFor<ForaValueArray*>::get()) +
		NativeType::Composite("mPagedAndPageletTreeValueCount", NativeTypeFor<uint64_t>::get()) +
		NativeType::Composite("mOwningMemoryPool", NativeTypeFor<MemoryPool*>::get()) +
		NativeType::Composite("mSize", NativeTypeFor<uint64_t>::get()) +
		NativeType::Composite("mIsWriteable", NativeTypeFor<uword_t>::get()) +
		NativeType::Composite("mValidityFlag", NativeTypeFor<uword_t>::get()) +
		NativeType::Composite(
			"mBigVectorHandleSlots",
			NativeType::Array(
				NativeTypeFor<BigVectorHandle*>::get(),
				VectorHandle::kMaxBigVectorHandles
				)
			);

	return unpadded + NativeType::Composite(
		NativeType::Array(
			NativeType::Integer(8,false),
			sizeof(TypedFora::Abi::VectorHandle) - unpadded.packedSize()
			)
		);
	}

namespace {

void incrementRefcountStatic(TypedFora::Abi::VectorHandle* handle)
	{
	handle->incrementRefcount();
	}

void decrementRefcountStatic(TypedFora::Abi::VectorHandle* handle)
	{
	handle->decrementRefcount();
	}

}

TypedNativeExpression<void> behavior_type::incrementRefcount() const
	{
	return makeTypedNativeLibraryFunction(&incrementRefcountStatic)(self());
	}

TypedNativeExpression<void> behavior_type::decrementRefcount() const
	{
	return makeTypedNativeLibraryFunction(&decrementRefcountStatic)(self());
	}

TypedNativeExpression<AO_t*> behavior_type::refcountPtr() const
	{
	return TypedNativeExpression<AO_t*>(mThis["mRefcount"]);
	}

TypedNativeExpression<uint8_t**> behavior_type::basePackedDataPtr() const
	{
	return TypedNativeExpression<uint8_t**>(mThis["mBasePackedDataPtr"]);
	}

TypedNativeExpression<TypedFora::Abi::BigVectorHandle*> behavior_type::pagedValues() const
	{
	return TypedNativeExpression<TypedFora::Abi::BigVectorHandle*>(
		mThis["mBigVectorHandleSlots"].cast(NativeTypeFor<TypedFora::Abi::BigVectorHandle**>::get(), false)
			[	NativeRuntimeCallbacks::bigVectorSlotIndexExpr(
					NativeRuntimeCallbacks::callbackVar().expr()
					)]
			.load()
		);
	}

TypedNativeExpression<uint64_t> behavior_type::pagedAndPageletTreeValueCount() const
	{
	return TypedNativeExpression<uint64_t>(mThis["mPagedAndPageletTreeValueCount"].load());
	}

TypedNativeExpression<ForaValueArray*> behavior_type::unpagedValues() const
	{
	return TypedNativeExpression<ForaValueArray*>(mThis["mUnpagedValues"].load());
	}

TypedNativeExpression<uword_t> behavior_type::isWriteable() const
	{
	return TypedNativeExpression<uword_t>(mThis["mIsWriteable"].load());
	}

TypedNativeExpression<uint64_t> behavior_type::size() const
	{
	return TypedNativeExpression<uint64_t>(mThis["mSize"].load());
	}

TypedNativeExpression<uint64_t*> behavior_type::sizePtr() const
	{
	return TypedNativeExpression<uint64_t*>(mThis["mSize"]);
	}

TypedNativeExpression<TypedFora::Abi::VectorHandle*> behavior_type::self() const
	{
	return TypedNativeExpression<TypedFora::Abi::VectorHandle*>(mThis);
	}

