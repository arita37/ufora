/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <string>
#include "ImplValNativeCodeModel.hppml"
#include "../../Native/NativeRuntimeCallbacks.hppml"
#include <boost/python.hpp>
#include "BinaryLayoutStyle.hppml"

class Type;
class String;
class PooledString;
class Symbol;
class JudgmentOnValue;
class JudgmentOnValueTuple;
class TimeDuration;
class DateTime;
class Dictionary;
class NativeExpression;
class NativeConstant;
class CSTValue;
class JudgmentOnResult;
class JudgmentOnAction;
class NativeType;
class NativeCFG;
class NativeContinuationMetadata;
class NativeBlockID;
class MutableVectorRecord;
class VectorRecordHolder;
class ForaStackTrace;
class MemoryPool;
class VectorDataManager;
class ExternalFunctionDescriptor;



namespace Fora {

namespace Interpreter {

class ExecutionContextImpl;

}

class BigVectorId;


}

namespace TypedFora {
namespace Abi {
class VectorRecord;
class VectorLoadRequest;
class BigVectorLayouts;
}}

class ForaStackTrace;
class MemoryPool;
class VectorDataManager;

namespace TypedFora {
class Compiler;
}

template<>
class NativeTypeForImpl<Type> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<MemoryPool> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<TypedFora::Abi::BigVectorLayouts> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<ExternalFunctionDescriptor> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<Fora::BigVectorId> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<VectorDataManager> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<Fora::Interpreter::ExecutionContextImpl> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<JudgmentOnValue> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<JudgmentOnResult> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<TimeDuration> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<DateTime> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<Dictionary> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<String> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<PooledString> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<Symbol> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<ForaStackTrace> {
public:
	static NativeType get();
};

template<class T>
class Nullable;

template<class T>
class ImmutableTreeVector;

namespace TypedFora {

class Type;

namespace Abi {

class VectorRecord;
class HomogenousVectorStash;
class HomogenousDoubleVectorStash;

NativeType nativeLayoutType(const ::Type& t);
NativeType nativeLayoutType(const JudgmentOnValue&  t);

bool judgmentIsPOD(const JudgmentOnValue& inJOV);

BinaryLayoutStyle getPassingStyle(const JudgmentOnValue& j);

NativeExpression nativeExpressionForConstantHeldAsType(const CSTValue& c);
NativeExpression jovAsNativeConstant(const JudgmentOnValue& jmt);

NativeType continuationTypeFor(const JudgmentOnAction& inJOA);
ImmutableTreeVector<NativeType>	returnTypesFor(const JudgmentOnAction& inJOA);

NativeType nativeTypeForForaType(const Type& inType);

NativeType nativeTypeForForaTypeObject(const ::Type& untypedForaTypeObject);

NativeExpression nativeExpressionForConstant(const CSTValue& inConstant);

}
}


template<>
class NativeTypeForImpl<TypedFora::Abi::VectorRecord> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<TypedFora::Abi::HomogenousDoubleVectorStash> {
public:
	static NativeType get();
};

template<>
class NativeTypeForImpl<TypedFora::Abi::HomogenousVectorStash> {
public:
	static NativeType get();
};



