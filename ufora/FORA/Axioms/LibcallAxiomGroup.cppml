/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "LibcallAxiomGroup.hppml"
#include "../Judgment/JudgmentOnAction.hppml"
#include "../TypedFora/ABI/VectorLoadRequest.hppml"
#include "../TypedFora/ABI/VectorLoadRequestCodegen.hppml"
#include "../TypedFora/ABI/HomogenousVectorStashCodegen.hppml"
#include "../TypedFora/TypedFora.hppml"
#include "TypedForaAxiomBuilder.hppml"
#include "../../core/cppml/ExtractAllObjectsMatchingPredicate.hppml"
#include "../Native/NativeExpressionBuilder.hppml"

using TypedFora::Abi::nativeLayoutType;

namespace Fora  {


JudgmentOnValue ReturnSlot::jov() const
	{
	@match ReturnSlot(*this)
		-| Normal(jov) ->> {
			return jov;
			}
		-| Exception(jov) ->> {
			return jov;
			}
	}

JudgmentOnAction LibcallAxiomGroup::computeJOA() const
	{
	JudgmentOnAction joa;

	for (long k = 0; k < mReturnSlots.size(); k++)
		@match ReturnSlot(mReturnSlots[k])
			-| Normal(jov) ->> {
				joa = joa | JudgmentOnAction::Value(jov);
				}
			-| Exception(jov) ->> {
				joa = joa | JudgmentOnAction::Throws(jov);
				}

	if (mHasSideEffects)
		joa.hasSideEffects() = true;

	return joa;
	}


namespace {

bool isValidPassByValueJmt(const JudgmentOnValue& inJOV)
	{
	if (!inJOV.type())
		return false;

	return inJOV.type()->isPOD();
	}

}

pair<ImmutableTreeVector<NativeExpression>, ImmutableTreeVector<bool> >
			LibcallAxiomGroup::prepareArgumentToPass(
						long argumentIndex,
						long inputIndex,
						const NativeExpression& expression,
						const TypedFora::TypedForaAxiomBuilder& axiomBuilder
						)
	{
	NativeType expectingType = mArgumentTypes[argumentIndex].type();

	lassert(expression.type());

	pair<ImmutableTreeVector<NativeExpression>, ImmutableTreeVector<bool> > res;

	if (expectingType == *expression.type())
		{
		JudgmentOnValue argumentJov = mInputJudgments[mInputsToArguments[inputIndex]];

		lassert_dump(
			isValidPassByValueJmt(argumentJov),

			"Can't pass argument " << argumentIndex
				<< " of JOV " << prettyPrintString(argumentJov) << " by value "
				<< " into axiom with signature " << prettyPrintString(mInputJudgments)
				<< " returning " << prettyPrintString(mReturnSlots)
				<< ". use a reference for non POD data like this"
			);

		res.first = res.first + expression;
		res.second = res.second + false;
		}
		else
	if (expectingType == expression.type()->ptr())
		{
		res.first = res.first + expression;
		res.second = res.second + true;
		}
	else
		{
		lassert_dump(
			false,
			"Can't adapt argument of type " << prettyPrintString(*expression.type()) << " to slot "
				<< argumentIndex << " = " << prettyPrintString(mArgumentTypes[argumentIndex])
				<< " of axiom with signature " << prettyPrintString(mInputJudgments)
				<< " accepting native arguments of type "
				<< prettyPrintString(mArgumentTypes) << " and returning native types "
				<< prettyPrintString(mFunctionReturnTypes)
			);
		}

	if (argumentIndex + 1 < mArgumentTypes.size() && mArgumentTypes[argumentIndex+1].type() ==
			NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get())
		{
		res.first = res.first + axiomBuilder.nativeStashVar(mInputsToArguments[inputIndex]).expr();
		res.second = res.second + false;
		}
		else
	if (argumentIndex + 1 < mArgumentTypes.size() && mArgumentTypes[argumentIndex+1].type() ==
			NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get().ptr())
		{
		res.first = res.first + axiomBuilder.nativeStashVar(mInputsToArguments[inputIndex]).expr();
		res.second = res.second + true;
		}

	return res;
	}

ImmutableTreeVector<uword_t> LibcallAxiomGroup::computeExitPoints() const
	{
	JudgmentOnAction joa = computeJOA();

	ImmutableTreeVector<uword_t> outExitpoints;

	for (long k = 0; k < mReturnSlots.size();k++)
		{
		Nullable<uword_t> covering;

		covering = joa.smallestCovering(
			make_pair(mReturnSlots[k].jov(), mReturnSlots[k].isException())
			);

		lassert(covering);

		outExitpoints = outExitpoints + *covering;
		}

	return outExitpoints;
	}

void LibcallAxiomGroup::verifyInputs() const
	{
	lassert_dump(
		mReturnSlots.size() == mFunctionReturnTypes.size(),

		"Return type count mismatch in axiom with signature "
			<< prettyPrintString(mInputJudgments)
			<< " returning " << prettyPrintString(mReturnSlots)
			<< ", accepting native arguments of type "
			<< prettyPrintString(mArgumentTypes) << " and returning native types "
			<< prettyPrintString(mFunctionReturnTypes)
		);

	lassert(mReturnSlots.size());

	if (needsVectorLoad())
		lassert_dump(
			*mVectorLoadSlot == mReturnSlots.size(),

			"VectorLoadRequests should only appear as the last template argument of a ReturnValue"
			);
	}

ImmutableTreeVector<NativeType> LibcallAxiomGroup::computePossibleOutputTypes() const
	{
	ImmutableTreeVector<NativeType> possibleOutputTypes;

	for (long k = 0; k < mReturnSlots.size();k++)
		possibleOutputTypes = possibleOutputTypes + nativeLayoutType(mReturnSlots[k].jov());

	return possibleOutputTypes;
	}

uword_t LibcallAxiomGroup::computeMaxOutputSize(
		const ImmutableTreeVector<NativeType>& possibleOutputTypes
		) const
	{
	uword_t maxOutputSize = 0;

	for (long k = 0; k < mReturnSlots.size();k++)
		{
		maxOutputSize = std::max<uword_t>(
			maxOutputSize,
			possibleOutputTypes[k].packedSize()
			);
		}

	if (needsVectorLoad())
		{
		maxOutputSize = std::max<uword_t>(
			maxOutputSize,
			NativeTypeFor<TypedFora::Abi::VectorLoadRequest>::get().packedSize()
			);
		}

	if (maxOutputSize % 8 != 0)
		maxOutputSize = maxOutputSize + 8 - (maxOutputSize % 8);

	return maxOutputSize;
	}

Axiom LibcallAxiomGroup::buildAxiom()
	{
	verifyInputs();

	JudgmentOnAction joa = computeJOA();

	ImmutableTreeVector<uword_t> outExitpoints = computeExitPoints();

	ImmutableTreeVector<NativeType> possibleOutputTypes =
		computePossibleOutputTypes();

	uword_t maxOutputSize = computeMaxOutputSize(possibleOutputTypes);

	ImmutableTreeVector<TypedFora::Type> inputVariableTypes;

	ImmutableTreeVector<JudgmentOnValue> inputJudgments =
		mInputJudgments.toJOVListWithExtrasAsTrailingElement();

	ImmutableTreeVector<int64_t> indicesOfNonStashArguments;
	for (long k = 0; k < mArgumentTypes.size(); k++)
		if (mArgumentTypes[k].type() != NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get() &&
				mArgumentTypes[k].type() != NativeTypeFor<TypedFora::Abi::HomogenousVectorStash*>::get())
			indicesOfNonStashArguments = indicesOfNonStashArguments + k;

	std::vector<bool> isInputMarkedPooled;
	std::vector<bool> isInputMarkedNotPooled;

	isInputMarkedPooled.resize(inputJudgments.size());
	isInputMarkedNotPooled.resize(inputJudgments.size());

	for (long k = 0; k < mInputsToArguments.size(); k++)
		{
		int64_t input = mInputsToArguments[k];

		long correspondingArgument = indicesOfNonStashArguments[k];

		if (mArgumentTypes[correspondingArgument].isPooled())
			isInputMarkedPooled[input] = true;
		else
			isInputMarkedNotPooled[input] = true;
		}

	for (long k = 0; k < inputJudgments.size(); k++)
		lassert_dump(
			!(isInputMarkedPooled[k] && isInputMarkedNotPooled[k]),
			"can't use the same axiom input for pooled and unpooled use"
			);

	for (long k = 0; k < inputJudgments.size(); k++)
		inputVariableTypes = inputVariableTypes +
			TypedFora::Type(
				inputJudgments[k],
				isInputMarkedPooled[k] ?
					TypedFora::RefcountStyle::Pooled() :
					TypedFora::RefcountStyle::AsValueUnowned()
				);

	TypedFora::TypedForaAxiomBuilder axiomBuilder(mInputJudgments, inputVariableTypes);

	ImmutableTreeVector<NativeExpression> libcallArgs;
	ImmutableTreeVector<bool> libcallArgsPassByPointer;

	for (long k = 0; k < mInputsToArguments.size(); k++)
		{
		auto argAndPassByPtr =
			prepareArgumentToPass(
				libcallArgs.size(),
				k,
				axiomBuilder.nativeVar(mInputsToArguments[k]).expr(),
				axiomBuilder
				);

		libcallArgs = libcallArgs + argAndPassByPtr.first;
		libcallArgsPassByPointer = libcallArgsPassByPointer + argAndPassByPtr.second;
		}

	lassert_dump(
		mArgumentTypes.size() == libcallArgs.size(),

		"Input count mismatch in axiom with signature "
			<< prettyPrintString(mInputJudgments)
			<< " returning " << prettyPrintString(mReturnSlots)
			<< ", accepting native arguments of type "
			<< prettyPrintString(mArgumentTypes) << " and returning native types "
			<< prettyPrintString(mFunctionReturnTypes)
		);

	NativeExpression expr;
	NativeExpression preload = (mPreloadExpression ? *mPreloadExpression : NativeExpression::Nothing());

	if (mFunctionUsesReturnValue)
		{
		NativeType resultType =
			NativeType::Composite("index", NativeType::uword()) +
			NativeType::Composite("data",
				NativeType::Array(
					NativeType::uint8(),
					maxOutputSize
					)
				);

		NativeVariable res = NativeVariable::Temp(resultType);

		NativeExpression libcallExpr =
			preload >>
			NativeExpression::CallLibraryFunction(
				NativeLibraryFunctionTarget::ByPointer((uword_t)mFunctionPointer),
				res.type(),
				libcallArgs,
				libcallArgsPassByPointer,
				false
				);

		if (needsVectorLoad())
			{
			NativeBlockID block = NativeBlockID::entry();

			NativeVariable innerRes = NativeVariable::Temp(resultType);

			NativeExpression innerCheckExpr =
				NativeExpression::If(
					innerRes.expr()["index"] ==
					NativeExpression::ConstantULong(
						*mVectorLoadSlot
						),
					TypedNativeExpression<TypedFora::Abi::VectorLoadRequest>(
						innerRes.expr()["data"].cast(
							NativeTypeFor<TypedFora::Abi::VectorLoadRequest>::get(),
							true
							)
						).loadCheck().getExpression(),
					innerRes.expr(),
					0.0000001
					);

			libcallExpr = NativeCFG(
				emptyTreeVec(),
				NativeExpression::Let(
					innerRes,
					libcallExpr,
					innerCheckExpr
					)
				)().taggedWith(
					NativeExpressionTag::Generic(
						"LibcallWithVectorLoadcheck",
						emptyTreeMap() +
							std::string("libcallExpr") +
							libcallExpr
						)
					);
			}

		expr = NativeExpression::Halt("Bad exit value");

		for (long k = ((long)mReturnSlots.size()) - 1; k >= 0; k--)
			{
			lassert_dump(
				possibleOutputTypes[k] == mFunctionReturnTypes[k].type(),
				"In axiom with signature "
					<< prettyPrintString(mInputJudgments) << ", output type mismatch for return slot "
					<< k << ": "
					<< prettyPrintString(possibleOutputTypes[k]) << " != "
					<< prettyPrintString(mFunctionReturnTypes[k])
				);

			expr = NativeExpression::If(
				res.expr()["index"] == NativeExpression::ConstantULong(k),
				NativeExpression::Return(
					outExitpoints[k],
					res.expr()["data"].cast(possibleOutputTypes[k], true)
					),
				expr,
				.9999999
				);
			}


		expr =
			NativeExpression::Let(
				res,
				libcallExpr,
				expr
				);
		}
	else
		{
		lassert(!needsVectorLoad());

		lassert(mFunctionReturnTypes.size() == 1);

		lassert_dump(
			isValidPassByValueJmt(mReturnSlots[0].jov()),

			"Can't return value of JOV " << prettyPrintString(mReturnSlots[0].jov())
				<< " by value in axiom with signature " << prettyPrintString(mInputJudgments)
				<< ". use a ReturnValue<> for non-POD data like this, so that both LLVM and "
				<< " C++ know to pass the value on the stack."
			);

		expr =
			NativeExpression::Return(
				outExitpoints[0],
				preload >> NativeExpression::CallLibraryFunction(
					NativeLibraryFunctionTarget::ByPointer((uword_t)mFunctionPointer),
					mFunctionReturnTypes[0].type(),
					libcallArgs,
					libcallArgsPassByPointer,
					false
					)
				);
		}

	bool anyPooled = false;
	bool anyNotPooled = false;

	for (long k = 0; k < mFunctionReturnTypes.size(); k++)
		if (mFunctionReturnTypes[k].isPooled())
			anyPooled = true;
		else
			anyNotPooled = false;

	lassert_dump(
		!anyPooled || !anyNotPooled,
		"either all the results need to be pooled, or none"
		);

	return axiomBuilder.axiomForNativeExpression(
		expr.taggedWith(mTag),
		anyPooled ? TypedFora::RefcountStyle::Pooled() :
			TypedFora::RefcountStyle::AsValueOwned(),
		joa.resultPart(),
		joa.throwPart(),
		mInlineExpansionName
		);
	}


Nullable<Axiom> LibcallAxiomGroup::axiom(TypedFora::Compiler& c, const JudgmentOnValueTuple& s)
	{
	return null() << mAxiom;
	}

Nullable<AxiomJOA>	LibcallAxiomGroup::axiomJOA(const JudgmentOnValueTuple& s)
	{
	if (mSpecializer)
		return (*mSpecializer)(s);
	else
		return null() << AxiomJOA::Native(mAxiom.getNative().resultSignature());
	}

NativeCFGExpansion LibcallAxiomGroup::getExpansion() const
	{
	//this is a hacky way of getting the "NativeCFGExpansion" out of our Axiom without having
	//to rewrite everything.

	lassert(mAxiom.isNative());

	@match Axiom(mAxiom)
		-| Native(_, _, target) ->> {
			@match TypedFora::Callable(*target)
				-| NativeOperation(_, _, nativeTarget) ->> {
					auto results =
						extractAllObjectsMatchingPredicate(*nativeTarget,
							boost::function1<bool, NativeCFGExpansion>([](NativeCFGExpansion e) { return true; })
							);

					lassert_dump(results.size() == 1,
							results.size() << " != 1\n\n"
								<< prettyPrintString(*nativeTarget));

					return results[0];
					}
			}
	}

}

