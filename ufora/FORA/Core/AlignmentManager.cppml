/***************************************************************************
    Copyright 2015,2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "Alignment.hpp"
#include "AlignmentManager.hpp"
#include "ExecutionContext.hppml"
#include "ImplValContainerUtilities.hppml"
#include "MemoryPool.hpp"
#include "../TypedFora/ABI/VectorHandle.hpp"
#include "../TypedFora/ABI/VectorRecord.hpp"

#include <cuda_runtime_api.h>

AlignmentManager::AlignmentManager(MemoryPool* pool, bool freeAllocatedMemoryOnDestroy)
		: mPool(pool), mFreeOnDestroy(freeAllocatedMemoryOnDestroy)
	{
	lassert(mPool)
	}

AlignmentManager::AlignmentManager(bool freeAllocatedMemoryOnDestroy)
		: mFreeOnDestroy(freeAllocatedMemoryOnDestroy)
	{
	lassert(Fora::Interpreter::ExecutionContext::currentExecutionContext());
	mPool = Fora::Interpreter::ExecutionContext::currentExecutionContext()->getMemoryPool();
	}

AlignmentManager::~AlignmentManager()
	{
	if (mFreeOnDestroy)
		{
		for (auto ptr: mManagedMemory)
			mPool->free(ptr);

		cudaDeviceSynchronize();
		for (auto ptr: mCudaManagedMemory)
		    cudaFree(ptr);
		}
	}

uint8_t* AlignmentManager::getHandleToAlignedDataGeneric(
		const ImplValContainer& value,
		uint8_t* (AlignmentManager::*allocator)(const Type&, uword_t),
		bool shouldAlwaysCopyData
		)
	{
	Type t = value.type();
	Type elementType = t;
	uword_t elementCount = 1;
	uint8_t* packedDataPtr = (uint8_t*) value.data();

	@match Type(t)
	-| 	Vector() ->>
		{
		TypedFora::Abi::VectorRecord vectorHandle =
				value.cast<TypedFora::Abi::VectorRecord>();

		lassert(vectorHandle.size() &&
				vectorHandle.jor().size() == 1 &&
				vectorHandle.jor()[0].type());

		elementCount = vectorHandle.size();
		if (elementCount == 0)
			return nullptr;

		auto res = vectorHandle.jor()[0].type();
		if (!res)
			return nullptr;
		elementType = *res;
		if (elementType.size() == 0)
			return nullptr;

		lassert(vectorHandle.dataPtr()->unpagedValues());
		lassert(vectorHandle.dataPtr()->unpagedValues()->size() == elementCount);

		packedDataPtr = vectorHandle.dataPtr()->unpagedValues()->offsetFor(0);

		if (!shouldAlwaysCopyData && elementType.size() == elementType.alignedSize())
			return packedDataPtr;

		// Invariant: elementType.size() > 0
		uint8_t* alignedDataPtr = (this->*allocator)(elementType, elementCount);
		if (alignedDataPtr)
			if (elementType.size() == elementType.alignedSize())
				memcpy(alignedDataPtr, packedDataPtr, elementCount * elementType.alignedSize());
			else
				for (long k = 0; k < elementCount; ++k)
					{
					copyPackedToAligned(
							elementType,
							packedDataPtr  + k * elementType.size(),
							alignedDataPtr + k * elementType.alignedSize()
							);
					}
		return alignedDataPtr;
		}
	-|	Class(elementTypes, body) ->> {
		if (elementType.size() == 0)
			return nullptr;

		uint8_t* alignedDataPtr = (this->*allocator)(elementType, elementCount);
		if (!alignedDataPtr)
			return nullptr;

		uword_t offset = 0;
		uint8_t* alignedData = alignedDataPtr;
		uint8_t* packedData = packedDataPtr;
		for (long k = 0; k < elementTypes.size(); ++k)
			{
			uword_t padding = alignedOffset(elementTypes[k], offset) - offset;
			alignedData = alignedData + padding;
			copyPackedToAligned(elementTypes[k], packedData, alignedData);
			if (elementTypes[k].isVector())
				{
				// replace the pointer to the VectorHandle with a pointer to a
				// freshly allocated vector
				uint8_t* vecPtr =
						getHandleToAlignedDataGeneric(
								ImplValContainerUtilities::createVector(*(TypedFora::Abi::VectorRecord*)packedData),
								allocator,
								shouldAlwaysCopyData
								);
				*(uint8_t**)alignedData = vecPtr;
				}
			alignedData = alignedData + elementTypes[k].alignedSize();
			packedData  = packedData + elementTypes[k].size();
			offset += padding + elementTypes[k].alignedSize();
			}
		return alignedDataPtr;
		}
	-|	_ ->>
		{
		lassert_dump(false, "not implemented for type" << t.toString());
		}
	}

uint8_t* AlignmentManager::getHandleToAlignedData(const ImplValContainer& value)
	{
	return getHandleToAlignedDataGeneric(value, &AlignmentManager::allocateAlignedData, false);
	}

uint8_t* AlignmentManager::getHandleToCudaAlignedData(const ImplValContainer& value)
	{
	return getHandleToAlignedDataGeneric(value, &AlignmentManager::allocateCudaAlignedData, true);
	}

uint8_t* AlignmentManager::allocateAlignedData(const Type& t, uword_t elementCount)
	{
	uint8_t* alignedDataPtr = nullptr;

	if (!mPool->permitAllocation(t.alignedSize() * elementCount))
		return nullptr;
	alignedDataPtr = mPool->allocate(t.alignedSize() * elementCount);
	if (!alignedDataPtr)
		return nullptr;
	mManagedMemory = mManagedMemory + alignedDataPtr;

	return alignedDataPtr;
	}

uint8_t* AlignmentManager::allocateCudaAlignedData(const Type& t, uword_t elementCount)
	{
	uint8_t* alignedDataPtr = nullptr;
	cudaError_t err;
	err = cudaMallocManaged((void**)&alignedDataPtr, t.alignedSize() * elementCount, cudaMemAttachGlobal);
	if (err != cudaSuccess)
		return nullptr;
	mCudaManagedMemory = mCudaManagedMemory + alignedDataPtr;

	cudaDeviceSynchronize();
	return alignedDataPtr;
	}
